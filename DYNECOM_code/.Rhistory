patts <- c(paste0(paircond[1], '_', cond_str), paste0(paircond[2], '_', cond_str))
Sr6m.cor <- cond2cormat(basepath, patts, feature, cormeth, triangle = FALSE)
# Permutation testing
Sr.obsVrand_corr <- replicate(REPS, sampmat_diag_stat(mean, Sr6m.cor$cormat))
hist(Sr.obsVrand_corr, col='black', breaks=100,
main = paste(cond_str, ", two-tailed p =", sum(abs(Sr.obsVrand_corr) > abs(Sr6m.cor$avg.cor)) / REPS))
abline(v=Sr6m.cor$avg.cor, col='blue', lwd=2)
# CONDITION S_na_6mins
cond_str <- paste0(dyadcond[2], '_', physcond[4], '.*', timecond[3])
patts <- c(paste0(paircond[1], '_', cond_str), paste0(paircond[2], '_', cond_str))
Sn6m.cor <- cond2cormat(basepath, patts, feature, cormeth, triangle = FALSE)
# Permutation testing
Sn.obsVrand_corr <- replicate(REPS, sampmat_diag_stat(mean, Sn6m.cor$cormat))
hist(Sn.obsVrand_corr, col='black', breaks=100,
main = paste(cond_str, ", two-tailed p =", sum(abs(Sn.obsVrand_corr) > abs(Sn6m.cor$avg.cor)) / REPS))
abline(v=Sn6m.cor$avg.cor, col='blue', lwd=2)
library(gghalves)
df.sync <- c(Dn6m.cor$avg.cor, De6m.cor$avg.cor, Dr6m.cor$avg.cor, Db6m.avg.cor,
Sn6m.cor$avg.cor, Se6m.cor$avg.cor, Sr6m.cor$avg.cor, Sb6m.cor$avg.cor)
df.sync <- data.frame("D_na" = Dn6m.cor$avg.cor, "D_eeg" = De6m.cor$avg.cor,
"D_resp" = Dr6m.cor$avg.cor, "D_both" = Db6m.avg.cor,
"S_na" = Sn6m.cor$avg.cor, "S_eeg" = Se6m.cor$avg.cor,
"S_resp" = Sr6m.cor$avg.cor, "S_both" = Sb6m.cor$avg.cor) %>%
gather(key = "Condition", value = "synchrony")
df.perm <- data.frame("D_na" = Dn.obsVrand_corr, "D_eeg" = De.obsVrand_corr,
"D_resp" = Dr.obsVrand_corr, "D_both" = Db.obsVrand_corr,
"S_na" = Sn.obsVrand_corr, "S_eeg" = Se.obsVrand_corr,
"S_resp" = Sr.obsVrand_corr, "S_both" = Sb.obsVrand_corr) %>%
gather(key = "Condition", value = "synchrony")
# CONDITION D_both_6mins
Db.obsVrand_corr <- replicate(REPS, sampmat_diag_stat(mean, Db6m.cormat$corr))
hist(Db.obsVrand_corr, col='black', breaks=100,
main = paste(cond_str, ", two-tailed p =", sum(abs(Db.obsVrand_corr) > abs(Db6m.avg.cor)) / REPS))
abline(v=Db6m.avg.cor, col='blue', lwd=2)
library(gghalves)
df.sync <- c(Dn6m.cor$avg.cor, De6m.cor$avg.cor, Dr6m.cor$avg.cor, Db6m.avg.cor,
Sn6m.cor$avg.cor, Se6m.cor$avg.cor, Sr6m.cor$avg.cor, Sb6m.cor$avg.cor)
df.sync <- data.frame("D_na" = Dn6m.cor$avg.cor, "D_eeg" = De6m.cor$avg.cor,
"D_resp" = Dr6m.cor$avg.cor, "D_both" = Db6m.avg.cor,
"S_na" = Sn6m.cor$avg.cor, "S_eeg" = Se6m.cor$avg.cor,
"S_resp" = Sr6m.cor$avg.cor, "S_both" = Sb6m.cor$avg.cor) %>%
gather(key = "Condition", value = "synchrony")
df.perm <- data.frame("D_na" = Dn.obsVrand_corr, "D_eeg" = De.obsVrand_corr,
"D_resp" = Dr.obsVrand_corr, "D_both" = Db.obsVrand_corr,
"S_na" = Sn.obsVrand_corr, "S_eeg" = Se.obsVrand_corr,
"S_resp" = Sr.obsVrand_corr, "S_both" = Sb.obsVrand_corr) %>%
gather(key = "Condition", value = "synchrony")
# Basic violin plot
ggplot(df.perm, aes(x=Condition, y=synchrony)) +
geom_half_violin(trim=FALSE, fill="gray", side = "r") +
geom_boxplot(width=0.1, outlier.shape = NA) +
geom_crossbar(aes(ymin = synchrony, ymax = synchrony), df.sync, color = "red") +
coord_flip() +
labs(title="Permutation test of SCR synchrony per condition", x="Condition", y = "Synchrony (correlation)") +
theme_classic()
ggplot(df.perm, aes(x=Condition, y=synchrony)) +
geom_half_violin(trim=FALSE, fill="gray", side = "r") +
geom_boxplot(width=0.1, outlier.shape = NA) +
geom_crossbar(aes(ymin = synchrony, ymax = synchrony), df.sync, color = "red") +
coord_flip() +
labs(title="Permutation test of SCR synchrony per condition", x="Condition", y = "Synchrony (correlation)") +
theme_classic()
ggplot(df.perm, aes(x=Condition, y=synchrony)) +
geom_half_violin(trim=FALSE, fill="gray", side = "r") +
geom_boxplot(width=0.1, outlier.shape = NA) +
geom_crossbar(aes(ymin = synchrony, ymax = synchrony), df.sync, color = "red") +
coord_flip() +
labs(title="Permutation test of HRV synchrony per condition", x="Condition", y = "Synchrony (correlation)") +
theme_classic()
library(gghalves)
df.sync <- c(Dn6m.cor$avg.cor, De6m.cor$avg.cor, Dr6m.cor$avg.cor, Db6m.avg.cor,
Sn6m.cor$avg.cor, Se6m.cor$avg.cor, Sr6m.cor$avg.cor, Sb6m.cor$avg.cor)
df.sync <- data.frame("D_na" = Dn6m.cor$avg.cor, "D_eeg" = De6m.cor$avg.cor,
"D_resp" = Dr6m.cor$avg.cor, "D_both" = Db6m.avg.cor,
"S_na" = Sn6m.cor$avg.cor, "S_eeg" = Se6m.cor$avg.cor,
"S_resp" = Sr6m.cor$avg.cor, "S_both" = Sb6m.cor$avg.cor) %>%
gather(key = "Condition", value = "synchrony")
df.perm <- data.frame("D_na" = Dn.obsVrand_corr, "D_eeg" = De.obsVrand_corr,
"D_resp" = Dr.obsVrand_corr, "D_both" = Db.obsVrand_corr,
"S_na" = Sn.obsVrand_corr, "S_eeg" = Se.obsVrand_corr,
"S_resp" = Sr.obsVrand_corr, "S_both" = Sb.obsVrand_corr) %>%
gather(key = "Condition", value = "synchrony")
# Basic violin plot
ggplot(df.perm, aes(x=Condition, y=synchrony)) +
geom_half_violin(trim=FALSE, fill="gray", side = "r") +
geom_boxplot(width=0.1, outlier.shape = NA) +
geom_crossbar(aes(ymin = synchrony, ymax = synchrony), df.sync, color = "red") +
coord_flip() +
labs(title="Permutation test of HRV synchrony per condition", x="Condition", y = "Synchrony (correlation)") +
theme_classic()
ggplot(df.perm, aes(x=Condition, y=synchrony)) +
geom_half_violin(trim=FALSE, fill="gray", side = "r") +
geom_boxplot(width=0.1, outlier.shape = NA) +
geom_crossbar(aes(ymin = synchrony, ymax = synchrony), df.sync, color = "red") +
coord_flip() +
labs(title="Permutation test of HRV synchrony per condition", x="Condition", y = "Synchrony (correlation)") +
theme_classic()
# Basic violin plot
ggplot(df.perm, aes(x=Condition, y=synchrony)) +
geom_half_violin(trim=FALSE, fill="gray", side = "r") +
geom_boxplot(width=0.1, outlier.shape = NA) +
geom_crossbar(aes(ymin = synchrony, ymax = synchrony), df.sync, color = "red") +
coord_flip() +
xlim(rev(levels(x$variable))) +
labs(title="Permutation test of HRV synchrony per condition", x="Condition", y = "Synchrony (correlation)") +
theme_classic()
# Basic violin plot
ggplot(df.perm, aes(x=Condition, y=synchrony)) +
geom_half_violin(trim=FALSE, fill="gray", side = "r") +
geom_boxplot(width=0.1, outlier.shape = NA) +
geom_crossbar(aes(ymin = synchrony, ymax = synchrony), df.sync, color = "red") +
coord_flip() +
xlim(rev(levels(df.sync$variable))) +
labs(title="Permutation test of HRV synchrony per condition", x="Condition", y = "Synchrony (correlation)") +
theme_classic()
# Basic violin plot
ggplot(df.perm, aes(x=Condition, y=synchrony)) +
geom_half_violin(trim=FALSE, fill="gray", side = "r") +
geom_boxplot(width=0.1, outlier.shape = NA) +
geom_crossbar(aes(ymin = synchrony, ymax = synchrony), df.sync, color = "red") +
coord_flip() +
xlim(rev(levels(df.sync$Condition))) +
labs(title="Permutation test of HRV synchrony per condition", x="Condition", y = "Synchrony (correlation)") +
theme_classic()
# Basic violin plot
ggplot(df.perm, aes(x=Condition, y=synchrony)) +
geom_half_violin(trim=FALSE, fill="gray", side = "r") +
geom_boxplot(width=0.1, outlier.shape = NA) +
geom_crossbar(aes(ymin = synchrony, ymax = synchrony), df.sync, color = "red") +
ylim(rev(levels(df.sync$Condition))) +
coord_flip() +
labs(title="Permutation test of HRV synchrony per condition", x="Condition", y = "Synchrony (correlation)") +
theme_classic()
# Basic violin plot
ggplot(df.perm, aes(x=Condition, y=synchrony)) +
geom_half_violin(trim=FALSE, fill="gray", side = "r") +
geom_boxplot(width=0.1, outlier.shape = NA) +
geom_crossbar(aes(ymin = synchrony, ymax = synchrony), df.sync, color = "red") +
xlim(rev(levels(df.sync$Condition))) +
coord_flip() +
labs(title="Permutation test of HRV synchrony per condition", x="Condition", y = "Synchrony (correlation)") +
theme_classic()
name
df.perm <- data.frame("D_na" = Dn.obsVrand_corr, "D_eeg" = De.obsVrand_corr,
"D_resp" = Dr.obsVrand_corr, "D_both" = Db.obsVrand_corr,
"S_na" = Sn.obsVrand_corr, "S_eeg" = Se.obsVrand_corr,
"S_resp" = Sr.obsVrand_corr, "S_both" = Sb.obsVrand_corr) %>%
gather(key = "Condition", value = "synchrony") %>%
mutate(name=factor(name, levels=df.sync$Condition))
df.perm <- data.frame("D_na" = Dn.obsVrand_corr, "D_eeg" = De.obsVrand_corr,
"D_resp" = Dr.obsVrand_corr, "D_both" = Db.obsVrand_corr,
"S_na" = Sn.obsVrand_corr, "S_eeg" = Se.obsVrand_corr,
"S_resp" = Sr.obsVrand_corr, "S_both" = Sb.obsVrand_corr) %>%
gather(key = "Condition", value = "synchrony") %>%
mutate(name=factor(Condition, levels=df.sync$Condition))
# Basic violin plot
ggplot(df.perm, aes(x=Condition, y=synchrony)) +
geom_half_violin(trim=FALSE, fill="gray", side = "r") +
geom_boxplot(width=0.1, outlier.shape = NA) +
geom_crossbar(aes(ymin = synchrony, ymax = synchrony), df.sync, color = "red") +
coord_flip() +
labs(title="Permutation test of HRV synchrony per condition", x="Condition", y = "Synchrony (correlation)") +
theme_classic()
df.perm <- data.frame("D_na" = Dn.obsVrand_corr, "D_eeg" = De.obsVrand_corr,
"D_resp" = Dr.obsVrand_corr, "D_both" = Db.obsVrand_corr,
"S_na" = Sn.obsVrand_corr, "S_eeg" = Se.obsVrand_corr,
"S_resp" = Sr.obsVrand_corr, "S_both" = Sb.obsVrand_corr) %>%
gather(key = "Condition", value = "synchrony") %>%
mutate(Condition=factor(Condition, levels=df.sync$Condition))
# Basic violin plot
ggplot(df.perm, aes(x=Condition, y=synchrony)) +
geom_half_violin(trim=FALSE, fill="gray", side = "r") +
geom_boxplot(width=0.1, outlier.shape = NA) +
geom_crossbar(aes(ymin = synchrony, ymax = synchrony), df.sync, color = "red") +
coord_flip() +
labs(title="Permutation test of HRV synchrony per condition", x="Condition", y = "Synchrony (correlation)") +
theme_classic()
?coord_flip
# Basic violin plot
ggplot(df.perm, aes(x=Condition, y=synchrony)) +
geom_half_violin(trim=FALSE, fill="gray", side = "r") +
geom_boxplot(width=0.1, outlier.shape = NA) +
geom_crossbar(aes(ymin = synchrony, ymax = synchrony), df.sync, color = "red") +
?coord_flip() + scale_x_reverse() +
labs(title="Permutation test of HRV synchrony per condition", x="Condition", y = "Synchrony (correlation)") +
theme_classic()
# Basic violin plot
ggplot(df.perm, aes(x=Condition, y=synchrony)) +
geom_half_violin(trim=FALSE, fill="gray", side = "r") +
geom_boxplot(width=0.1, outlier.shape = NA) +
geom_crossbar(aes(ymin = synchrony, ymax = synchrony), df.sync, color = "red") +
coord_flip() + scale_x_reverse() +
labs(title="Permutation test of HRV synchrony per condition", x="Condition", y = "Synchrony (correlation)") +
theme_classic()
df.sync$Condition
sort(df.sync$Condition)
df_transpose(df.sync$Condition)
t(df.sync$Condition)
t(t(df.sync$Condition))
rev(df.sync$Condition)
df.perm <- data.frame("D_na" = Dn.obsVrand_corr, "D_eeg" = De.obsVrand_corr,
"D_resp" = Dr.obsVrand_corr, "D_both" = Db.obsVrand_corr,
"S_na" = Sn.obsVrand_corr, "S_eeg" = Se.obsVrand_corr,
"S_resp" = Sr.obsVrand_corr, "S_both" = Sb.obsVrand_corr) %>%
gather(key = "Condition", value = "synchrony") %>%
mutate(Condition=factor(Condition, levels=rev(df.sync$Condition)))
# Basic violin plot
ggplot(df.perm, aes(x=Condition, y=synchrony)) +
geom_half_violin(trim=FALSE, fill="gray", side = "r") +
geom_boxplot(width=0.1, outlier.shape = NA) +
geom_crossbar(aes(ymin = synchrony, ymax = synchrony), df.sync, color = "red") +
coord_flip() +
labs(title="Permutation test of HRV synchrony per condition", x="Condition", y = "Synchrony (correlation)") +
theme_classic()
ggplot(df.perm, aes(x=Condition, y=synchrony)) +
geom_half_violin(trim=FALSE, fill="gray", side = "r") +
geom_boxplot(width=0.1, outlier.shape = NA) +
geom_crossbar(aes(ymin = synchrony, ymax = synchrony), df.sync, color = "red") +
coord_flip() +
labs(title="Permutation test of HRV synchrony per condition", x="Condition", y = "Synchrony (correlation)") +
theme_classic()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = '/home/bcowley/Benslab/EMOSYNC/DYNECOM/')
library(tidyverse)
library(reshape2)
library(RcppRoll)
library(DAAG)
library(cocor)
source('sync_functions.R')
source('znbnz_utils.R')
# data-type parameters
basepath <- 'EDAcsv'
feature <- 'scr'
centr <- TRUE
skale <- TRUE
# List of conditions
paircond <- c('a', 'b')
dyadcond <- c('D', 'S')
physcond <- c('both', 'eeg', 'resp', 'na')
timecond <- c('BL', '30s', '6min')
# sliding window parameters
wndw <- 40
step <- wndw / 2 # 50% overlap steps
method <- "sd" # options are: max, mean, median, min, prod, sd, sum, var; see ?RcppRoll
REPS <- 10000
# Create the first dataset as an example
cond_str <- paste0('_', dyadcond[1], '_', physcond[1], '.*', timecond[3])
dfa <- read_all_recordings(basepath, pat=paste0(paircond[1], cond_str), ext="csv", skip = 1)
dfb <- read_all_recordings(basepath, pat=paste0(paircond[2], cond_str), ext="csv", skip = 1)
dfa$ab <- 1
dfb$ab <- 2
df <- rbind(dfa, dfb)
subjs <- unique(df$Part)
sbjix <- seq(1, length(subjs))
Db6m.pr1.1 <- corr_rollme_1pr(df, 1, 1, feature, wndw, step, CTR = centr, SCL = skale)
# Db6m.corr <- corr_rollme_allpr(df, feature, wndw, step)
Db6m.cormat <- corr_rollme_mat(df, feature, wndw, step, method, CTR = centr, SCL = skale)
Db6m.corr <- diag(Db6m.cormat$corr)
# Db6m.count <- Db6m.cormat$count
# Aggregates
Db6m.avg.cor <- mean(Db6m.corr)   # for constant N, Hunter-Schmidt aggregation is equivalent to average correlation
Db6m.abav.cor <- mean(abs(Db6m.corr)) # for constant N, Hunter-Schmidt aggregation is equivalent to average correlation
# show corr matrix
plot_rwb_cormat(Db6m.cormat$corr)
samp <- sample_matrix(Db6m.cormat$corr, repl = FALSE)
plot_rwb_cormat(samp$sampmat)
# CONDITION D_both_6mins
Db.obsVrand_corr <- replicate(REPS, sampmat_diag_stat(mean, Db6m.cormat$corr))
hist(Db.obsVrand_corr, col='black', breaks=100,
main = paste(cond_str, ", two-tailed p =", sum(abs(Db.obsVrand_corr) > abs(Db6m.avg.cor)) / REPS))
abline(v=Db6m.avg.cor, col='blue', lwd=2)
# CONDITION D_eeg_6mins
cond_str <- paste0(dyadcond[1], '_', physcond[2], '.*', timecond[3])
patts <- c(paste0(paircond[1], '_', cond_str), paste0(paircond[2], '_', cond_str))
De6m.cor <- cond2rollcormat(basepath, patts, feature, wndw, step, method, triangle = FALSE, CTR = centr, SCL = skale)
# Permutation testing
De.obsVrand_corr <- replicate(REPS, sampmat_diag_stat(mean, De6m.cor$cormat))
hist(De.obsVrand_corr, col='black', breaks=100,
main = paste(cond_str, ", two-tailed p =", sum(abs(De.obsVrand_corr) > abs(De6m.cor$avg.cor)) / REPS))
abline(v=De6m.cor$avg.cor, col='blue', lwd=2)
# CONDITION D_resp_6mins
cond_str <- paste0(dyadcond[1], '_', physcond[3], '.*', timecond[3])
patts <- c(paste0(paircond[1], '_', cond_str), paste0(paircond[2], '_', cond_str))
Dr6m.cor <- cond2rollcormat(basepath, patts, feature, wndw, step, method, triangle = FALSE, CTR = centr, SCL = skale)
# Permutation testing
Dr.obsVrand_corr <- replicate(REPS, sampmat_diag_stat(mean, Dr6m.cor$cormat))
hist(Dr.obsVrand_corr, col='black', breaks=100,
main = paste(cond_str, ", two-tailed p =", sum(abs(Dr.obsVrand_corr) > abs(Dr6m.cor$avg.cor)) / REPS))
abline(v=Dr6m.cor$avg.cor, col='blue', lwd=2)
# CONDITION D_na_6mins
cond_str <- paste0(dyadcond[1], '_', physcond[4], '.*', timecond[3])
patts <- c(paste0(paircond[1], '_', cond_str), paste0(paircond[2], '_', cond_str))
Dn6m.cor <- cond2rollcormat(basepath, patts, feature, wndw, step, method, triangle = FALSE, CTR = centr, SCL = skale)
# Permutation testing
Dn.obsVrand_corr <- replicate(REPS, sampmat_diag_stat(mean, Dn6m.cor$cormat))
hist(Dn.obsVrand_corr, col='black', breaks=100,
main = paste(cond_str, ", two-tailed p =", sum(abs(Dn.obsVrand_corr) > abs(Dn6m.cor$avg.cor)) / REPS))
abline(v=Dn6m.cor$avg.cor, col='blue', lwd=2)
# CONDITION S_both_6mins
cond_str <- paste0(dyadcond[2], '_', physcond[1], '.*', timecond[3])
patts <- c(paste0(paircond[1], '_', cond_str), paste0(paircond[2], '_', cond_str))
Sb6m.cor <- cond2rollcormat(basepath, patts, feature, wndw, step, method, triangle = FALSE, CTR = centr, SCL = skale)
# Permutation testing
Sb.obsVrand_corr <- replicate(REPS, sampmat_diag_stat(mean, Sb6m.cor$cormat))
hist(Sb.obsVrand_corr, col='black', breaks=100,
main = paste(cond_str, ", two-tailed p =", sum(abs(Sb.obsVrand_corr) > abs(Sb6m.cor$avg.cor)) / REPS))
abline(v=Sb6m.cor$avg.cor, col='blue', lwd=2)
# CONDITION S_eeg_6mins
cond_str <- paste0(dyadcond[2], '_', physcond[2], '.*', timecond[3])
patts <- c(paste0(paircond[1], '_', cond_str), paste0(paircond[2], '_', cond_str))
Se6m.cor <- cond2rollcormat(basepath, patts, feature, wndw, step, method, triangle = FALSE, CTR = centr, SCL = skale)
# Permutation testing
Se.obsVrand_corr <- replicate(REPS, sampmat_diag_stat(mean, Se6m.cor$cormat))
hist(Se.obsVrand_corr, col='black', breaks=100,
main = paste(cond_str, ", two-tailed p =", sum(abs(Se.obsVrand_corr) > abs(Se6m.cor$avg.cor)) / REPS))
abline(v=Se6m.cor$avg.cor, col='blue', lwd=2)
# CONDITION S_resp_6mins
cond_str <- paste0(dyadcond[2], '_', physcond[3], '.*', timecond[3])
patts <- c(paste0(paircond[1], '_', cond_str), paste0(paircond[2], '_', cond_str))
Sr6m.cor <- cond2rollcormat(basepath, patts, feature, wndw, step, method, triangle = FALSE, CTR = centr, SCL = skale)
# Permutation testing
Sr.obsVrand_corr <- replicate(REPS, sampmat_diag_stat(mean, Sr6m.cor$cormat))
hist(Sr.obsVrand_corr, col='black', breaks=100,
main = paste(cond_str, ", two-tailed p =", sum(abs(Sr.obsVrand_corr) > abs(Sr6m.cor$avg.cor)) / REPS))
abline(v=Sr6m.cor$avg.cor, col='blue', lwd=2)
# CONDITION S_na_6mins
cond_str <- paste0(dyadcond[2], '_', physcond[4], '.*', timecond[3])
patts <- c(paste0(paircond[1], '_', cond_str), paste0(paircond[2], '_', cond_str))
Sn6m.cor <- cond2rollcormat(basepath, patts, feature, wndw, step, method, triangle = FALSE, CTR = centr, SCL = skale)
# Permutation testing
Sn.obsVrand_corr <- replicate(REPS, sampmat_diag_stat(mean, Sn6m.cor$cormat))
hist(Sn.obsVrand_corr, col='black', breaks=100,
main = paste(cond_str, ", two-tailed p =", sum(abs(Sn.obsVrand_corr) > abs(Sn6m.cor$avg.cor)) / REPS))
abline(v=Sn6m.cor$avg.cor, col='blue', lwd=2)
library(gghalves)
df.sync <- data.frame("D_na" = Dn6m.cor$avg.cor, "D_eeg" = De6m.cor$avg.cor,
"D_resp" = Dr6m.cor$avg.cor, "D_both" = Db6m.avg.cor,
"S_na" = Sn6m.cor$avg.cor, "S_eeg" = Se6m.cor$avg.cor,
"S_resp" = Sr6m.cor$avg.cor, "S_both" = Sb6m.cor$avg.cor) %>%
gather(key = "Condition", value = "synchrony")
df.perm <- data.frame("D_na" = Dn.obsVrand_corr, "D_eeg" = De.obsVrand_corr,
"D_resp" = Dr.obsVrand_corr, "D_both" = Db.obsVrand_corr,
"S_na" = Sn.obsVrand_corr, "S_eeg" = Se.obsVrand_corr,
"S_resp" = Sr.obsVrand_corr, "S_both" = Sb.obsVrand_corr) %>%
gather(key = "Condition", value = "synchrony")
mutate(Condition=factor(Condition, levels=rev(df.sync$Condition)))
library(gghalves)
df.sync <- data.frame("D_na" = Dn6m.cor$avg.cor, "D_eeg" = De6m.cor$avg.cor,
"D_resp" = Dr6m.cor$avg.cor, "D_both" = Db6m.avg.cor,
"S_na" = Sn6m.cor$avg.cor, "S_eeg" = Se6m.cor$avg.cor,
"S_resp" = Sr6m.cor$avg.cor, "S_both" = Sb6m.cor$avg.cor) %>%
gather(key = "Condition", value = "synchrony")
df.perm <- data.frame("D_na" = Dn.obsVrand_corr, "D_eeg" = De.obsVrand_corr,
"D_resp" = Dr.obsVrand_corr, "D_both" = Db.obsVrand_corr,
"S_na" = Sn.obsVrand_corr, "S_eeg" = Se.obsVrand_corr,
"S_resp" = Sr.obsVrand_corr, "S_both" = Sb.obsVrand_corr) %>%
gather(key = "Condition", value = "synchrony") %>%
mutate(Condition=factor(Condition, levels=rev(df.sync$Condition)))
# Basic violin plot
ggplot(df.perm, aes(x=Condition, y=synchrony)) +
geom_half_violin(trim=FALSE, fill="gray", side = "r") +
geom_boxplot(width=0.1, outlier.shape = NA) +
geom_crossbar(aes(ymin = synchrony, ymax = synchrony), df.sync, color = "red") +
coord_flip() +
labs(title="Permutation test of SCR synchrony per condition", x="Condition", y = "Synchrony (correlation)") +
theme_classic()
# Basic violin plot
ggplot(df.perm, aes(x=Condition, y=synchrony)) +
geom_half_violin(trim=FALSE, fill="gray", side = "r") +
geom_boxplot(width=0.1, outlier.shape = NA) +
geom_crossbar(aes(ymin = synchrony, ymax = synchrony), df.sync, color = "red") +
coord_flip() +
labs(title="Permutation test of SCR synchrony per condition", x="Condition", y = "Synchrony (correlation)") +
theme_classic()
# DEALING WITH THE EDA RESULT CONDITION FIRST
df.Sna.a <- df %>% filter(Scenario == 5 & AorB == 1)
df <- read.csv('dynecom_Data.csv')
srep.sbjix <- sort(unique(df$PairID))
# DEALING WITH THE EDA RESULT CONDITION FIRST
df.Sna.a <- df %>% filter(Scenario == 5 & AorB == 1)
df.Sna.a$sync <- Sn6m.cor$corrs
df.Sna.b <- df %>% filter(Scenario == 5 & AorB == 2)
df.Sna.b$sync <- Sn6m.cor$corrs
df.Sna <- rbind(df.Sna.a, df.Sna.b)
df.Sna.mdl <- lm(sync ~ Batson_empathy + inter_arousal + inter_dominance + inter_valence + interCP + interPAI + interPAU + Relationship_legth_mean + Closeness_mean + Sex, data = df.Sna)
summary(df.Sna.mdl)
with(df.Sna, plot(jitter(sync, 2), jitter(interCP, 2)))
with(df.Sna, plot(jitter(sync, 2), jitter(interPAU, 2)))
with(df.Sna, plot(jitter(sync, 2), Sex))
df.Sna.mdl <- lm(sync ~ Batson_empathy +
inter_arousal + inter_dominance + inter_valence + interCP + interPAI + interPAU +
SAM_Arousal_self + SAM_Valence_self + SAM_Dominance_self +
Co_Presence_self +
Perceived_Affective_Interdependence_self + Perceived_Affective_Understanding_self +
Relationship_legth_mean + Closeness_mean + Sex, data = df.Sna)
summary(df.Sna.mdl)
# Sex violin plot
ggplot(df.Sna, aes(x=Sex, y=sync)) +
geom_boxplot(width=0.1, outlier.shape = NA) +
labs(title="SCR synchrony per gender", x="Gender", y = "Synchrony (correlation)") +
theme_classic()
# Sex violin plot
ggplot(df.Sna, aes(x=Sex, y=sync)) +
geom_half_violin(trim=FALSE, fill="gray", side = "r") +
geom_boxplot(width=0.1, outlier.shape = NA) +
labs(title="SCR synchrony per gender", x="Gender", y = "Synchrony (correlation)") +
theme_classic()
# Sex violin plot
ggplot(df.Sna, aes(x=as.factor(Sex), y=sync)) +
geom_half_violin(trim=FALSE, fill="gray", side = "r") +
geom_boxplot(width=0.1, outlier.shape = NA) +
labs(title="SCR synchrony per gender", x="Gender", y = "Synchrony (correlation)") +
theme_classic()
# Sex violin plot
ggplot(df.Sna, aes(x=as.factor(Sex), y=sync)) +
geom_half_violin(trim=FALSE, fill="gray", side = "r") +
geom_boxplot(width=0.1, outlier.shape = NA) +
labs(title="SCR synchrony per gender", x="Gender", y = "Synchrony (correlation)") +
coord_flip() +
theme_classic()
df.Drsp.mdl <- lm(sync ~ Batson_empathy +
inter_arousal + inter_dominance + inter_valence + interCP + interPAI + interPAU +
SAM_Arousal_self + SAM_Valence_self + SAM_Dominance_self +
Co_Presence_self +
Perceived_Affective_Interdependence_self + Perceived_Affective_Understanding_self +
Relationship_legth_mean + Closeness_mean + Sex, data = df.Drsp)
df <- read.csv('dynecom_Data.csv')
shareID <- intersect( intersect(df %>% filter(AorB == 1) %>% select(PairID) %>% unlist(),
df %>% filter(AorB == 2) %>% select(PairID) %>% unlist()),
De6m.cor$subjs)
# DEALING WITH THE D-EEG CONDITION RESULT FIRST
sharePairID <- intersect( intersect(
df %>% filter(Scenario == 2 & AorB == 1) %>% select(PairID) %>% unlist(),
df %>% filter(Scenario == 2 & AorB == 2) %>% select(PairID) %>% unlist()),
De6m.cor$subjs)
df.Deeg.a <- df %>% filter(Scenario == 2 & AorB == 1 & PairID %in% sharePairID)
df.Deeg.a$sync <- De6m.cor$corrs[De6m.cor$subjs %in% sharePairID]
df.Deeg.b <- df %>% filter(Scenario == 2 & AorB == 2 & PairID %in% sharePairID)
df.Deeg.b$sync <- De6m.cor$corrs[De6m.cor$subjs %in% sharePairID]
df.Deeg <- rbind(df.Deeg.a, df.Deeg.b)
df.Deeg.mdl <- lm(sync ~ Batson_empathy +
inter_arousal + inter_dominance + inter_valence + interCP + interPAI + interPAU +
SAM_Arousal_self + SAM_Valence_self + SAM_Dominance_self +
Co_Presence_self +
Perceived_Affective_Interdependence_self + Perceived_Affective_Understanding_self +
Relationship_legth_mean + Closeness_mean + Sex, data = df.Deeg)
summary(df.Deeg.mdl)
# DEALING WITH THE D-RESP CONDITION RESULT
sharePairID <- intersect( intersect(
df %>% filter(Scenario == 3 & AorB == 1) %>% select(PairID) %>% unlist(),
df %>% filter(Scenario == 3 & AorB == 2) %>% select(PairID) %>% unlist()),
Dr6m.cor$subjs)
df.Drsp.a <- df %>% filter(Scenario == 3 & AorB == 1 & PairID %in% sharePairID)
df.Drsp.a$sync <- Dr6m.cor$corrs[Dr6m.cor$subjs %in% sharePairID]
df.Drsp.b <- df %>% filter(Scenario == 3 & AorB == 2 & PairID %in% sharePairID)
df.Drsp.b$sync <- Dr6m.cor$corrs[Dr6m.cor$subjs %in% sharePairID]
df.Drsp <- rbind(df.Drsp.a, df.Drsp.b)
df.Drsp.mdl <- lm(sync ~ Batson_empathy +
inter_arousal + inter_dominance + inter_valence + interCP + interPAI + interPAU +
SAM_Arousal_self + SAM_Valence_self + SAM_Dominance_self +
Co_Presence_self +
Perceived_Affective_Interdependence_self + Perceived_Affective_Understanding_self +
Relationship_legth_mean + Closeness_mean + Sex, data = df.Drsp)
summary(df.Drsp.mdl)
with(df.Drsp, plot(jitter(sync, 2), jitter(interPAI, 2)))
with(df.Drsp, plot(jitter(sync, 2), jitter(Relationship_legth_mean, 2)))
# Sex violin plot
ggplot(df.Drsp, aes(x=as.factor(Sex), y=sync)) +
geom_half_violin(trim=FALSE, fill="gray", side = "r") +
geom_boxplot(width=0.1, outlier.shape = NA) +
labs(title="HRV synchrony per gender", x="Gender", y = "Synchrony (correlation)") +
coord_flip() +
theme_classic()
install.packages(c("cocor", "gghalves", "knitr", "RcppRoll", "reshape2", "tidyverse"))
install.packages("DAAG")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = '/home/bcowley/Benslab/EMOSYNC/DYNECOM/')
library(tidyverse)
library(reshape2)
library(corrplot)
library(DAAG)
library(cocor)
source('sync_functions.R')
source('znbnz_utils.R')
df <- read.csv('dynecom_Data.csv')
root.dir = '/home/bcowley/Benslab/METHODMAN/project_DYNECOM/'
df <- read.csv(file.path(root.dir, 'dynecom_Data.csv'))
timecond <- c('BL', '30s', '6min')
# data-type parameters
basepath <- 'HRVcsv/'
feature <- 'rmssd' # OR stdevhr
# List of conditions
paircond <- c('a', 'b')
dyadcond <- c('D', 'S')
physcond <- c('both', 'eeg', 'resp', 'na')
timecond <- c('BL', '30s', '6min')
# Correlation method
cormeth <- 'kendall'
# # sliding window parameters
# wndw <- 60
# step <- wndw / 2 # 50% overlap steps
# method <- "mean" # options are: max, mean, median, min, prod, sd, sum, var; see ?RcppRoll
REPS <- 10000
# Create the first dataset as an example
cond_str <- paste0('_', dyadcond[1], '_', physcond[1], '.*', timecond[3])
dfa <- read_all_recordings(basepath, pat=paste0(paircond[1], cond_str), ext="csv")
dfb <- read_all_recordings(basepath, pat=paste0(paircond[2], cond_str), ext="csv")
dfa$ab <- 1
dfb$ab <- 2
df <- rbind(dfa, dfb)
subjs <- unique(df$Part)
sbjix <- seq(1, length(subjs))
